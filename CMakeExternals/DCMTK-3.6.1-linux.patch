diff -Naur DCMTK-original/CMake/dcmtkMacros.cmake DCMTK/CMake/dcmtkMacros.cmake
--- DCMTK-original/CMake/dcmtkMacros.cmake	2012-11-02 06:35:36.000000000 -0700
+++ DCMTK/CMake/dcmtkMacros.cmake	2017-04-05 11:59:04.603761740 -0700
@@ -26,6 +26,7 @@
 MACRO(DCMTK_ADD_EXECUTABLE PROGRAM)
     IF(BUILD_APPS)
         ADD_EXECUTABLE(${PROGRAM} ${ARGN})
+        SET_TARGET_PROPERTIES(${PROGRAM} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")

         # Make wildcard arguments work
         IF(WIN32 AND NOT MINGW)
diff -Naur DCMTK-original/CMake/dcmtkPrepare.cmake DCMTK/CMake/dcmtkPrepare.cmake
--- DCMTK-original/CMake/dcmtkPrepare.cmake	2012-11-02 06:37:54.000000000 -0700
+++ DCMTK/CMake/dcmtkPrepare.cmake	2017-04-05 11:59:04.603761740 -0700
@@ -107,7 +107,8 @@
 ENDIF(COMMAND CMAKE_POLICY)

 # pass optional build date to compiler
-ADD_DEFINITIONS("-DDCMTK_BUILD_DATE=\\\"2012-11-02\\\"")
+set(DCMTK_BUILD_DATE "\"2012-11-02\"")
+#ADD_DEFINITIONS("-DDCMTK_BUILD_DATE=\\\"2012-11-02\\\"")

 # make OFString(NULL) safe by default
 ADD_DEFINITIONS("-DUSE_NULL_SAFE_OFSTRING")
@@ -330,3 +331,4 @@
     ENDIF(HAVE_LIBRT)
   ENDIF(HAVE_PTHREAD_H)
 ENDIF(WITH_THREADS)
+
diff -Naur DCMTK-original/CMake/osconfig.h.in DCMTK/CMake/osconfig.h.in
--- DCMTK-original/CMake/osconfig.h.in	2012-11-02 06:35:36.000000000 -0700
+++ DCMTK/CMake/osconfig.h.in	2017-04-05 11:59:04.603761740 -0700
@@ -738,6 +738,8 @@
 /* Define to the date of this package. */
 #define PACKAGE_DATE "@DCMTK_PACKAGE_DATE@"

+#define DCMTK_BUILD_DATE @DCMTK_BUILD_DATE@
+
 /* Define to the version of this package. */
 #define PACKAGE_VERSION "@DCMTK_PACKAGE_VERSION@"

diff -Naur DCMTK-original/ofstd/libsrc/ofstd.cc DCMTK/ofstd/libsrc/ofstd.cc
--- DCMTK-original/ofstd/libsrc/ofstd.cc	2012-11-02 06:35:36.000000000 -0700
+++ DCMTK/ofstd/libsrc/ofstd.cc	2017-04-05 12:00:50.387101802 -0700
@@ -1859,7 +1859,7 @@
 #ifdef HAVE_WINDOWS_H
   if (_isnan(val))
 #else
-  if (isnan(val))
+  if (std::isnan(val))
 #endif
   {
     OFStandard::strlcpy(dst, "nan", siz);
@@ -1868,7 +1868,7 @@

   // check if val is infinity
 #ifdef HAVE_ISINF
-  if (isinf(val))
+  if (std::isinf(val))
 #else
   if (my_isinf(val))
 #endif
